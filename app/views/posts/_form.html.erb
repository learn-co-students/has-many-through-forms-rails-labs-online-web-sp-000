<!--The form should include check boxes for us to select categories as well as a text field to create a new category. 
You should do this with a nested form so that our controller stays thin.
Also, typing in a Category name that already exists should not create a new category.
if we type in a category that already exists, we should select it from the database and
 associate the post we've created with the existing category.-->
<style>
.whatever {
    border: 1px solid red
}
</style>
<h1>New Post</h1>

<%= form_for @post do |f| %>

  <%= f.label "Title" %>
  <%= f.text_field :title %>
  <br/>
  <br/>
  <%= f.label "Content" %>
  <%= f.text_area :content %>
  <br/>
  <br/>
  <!--
  <% Category.all.each do |c| %>
    <p>
    <label for="category_id <%= c.id %>"><%= c.name %><label>
    <input type="checkbox" name="post[category_ids][]" value="<%= c.id %> id="category_id <%= c.id %>">
    </p>
  <% end %> 
  <input type="text id="post_categories_attributes_0_name" name="post[categories_attributes_0_name]">
  <input type="text id="post_categories_attributes_1_name" name="post[categories_attributes_0_name]">

ISTO -->
   <%= f.collection_check_boxes(:category_ids, Category.all, :id, :name) do |b| %>
   <p>
        <% b.label class: "whatever"%>
        <% b.check_box %>
    </p>
    <% end %>
   <%# it will generate a checkbox named post[category_ids][] for each category in Category
   it will use :id as the value for the checkbox 
   and it will use :name as the label for the checkbix
   do end block will give checkbox vertical, with line breaks, very useful for customasing
   %>
  <br/>
  <br/>
  <%#<%= f.fields_for :categories, @post.categories.build do |categories_fields| %>
    <%#<%= categories_fields.label :name, "Category" %>
    |<%#<%= categories_fields.text_field :name %>
  <%#<% end %>

  <%= f.fields_for :categories, Category.new do |category_builder| %>
    <%= category_builder.text_field :name%>
  <% end %>

  <!--
  1. f is attached to the post
  2. the fields_for method looks to see if the object (post) attached to f responds
  to a method called categories_attribute=
  3a. if underlying object (post) does respond to the method fields_for knows you are building
  nested form
  3b. if underlying object (post) does not respond to the method fields_for assumes you are building
  something custom

  -->
  <br/>
  <br/>
  <%= f.submit %>
<% end %>

